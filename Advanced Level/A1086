#include <cstdio>
#include <algorithm>
#include <iostream>
#include <string>
#include <stack>
#include <vector>
using namespace std;

struct node {
	int data;
	node* left;
	node* right;
};
vector<int> pre, in;

node* create(int prel, int prer, int inl, int inr) {
	if (prel > prer) {
		return NULL;
	}
	node* root = new node;
	root->data = pre[prel];
	int k;
	for (k = inl;k <= inr;k++) {
		if (in[k] == pre[prel]) {
			break;
		}
	}
	int numleft = k - inl;
	root->left = create(prel + 1, prel + numleft, inl, k - 1);
	root->right = create(prel + numleft + 1, prer, k + 1, inr);
	return root;
}
int n;
int ct = 0;
void postOrder(node* root) {
	if (root == NULL) {
		return;
	}
	postOrder(root->left);
	postOrder(root->right);
	printf("%d", root->data);
	ct++;
	if (ct < n) {
		printf(" ");
	}
}

int main() {
	scanf("%d", &n);
	string op;
	stack<int> st;
	int count = 0;
	int num;
	for (int i = 0;i < n * 2;i++) {
		getchar();
		cin >> op;
		if (op == "Push") {
			scanf("%d", &num);
			st.push(num);
			pre.push_back(num);
		}
		else {
			num = st.top();
			in.push_back(num);
			st.pop();
		}
	}
	node* root = create(0, n - 1, 0, n - 1);
	postOrder(root);
	return 0;
}
