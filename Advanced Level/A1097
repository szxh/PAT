#include <cstdio>
#include <algorithm>
using namespace std;

const int maxn = 100010;

struct Node {
	int address, key, next;
	int order;
} node[maxn];

bool hashTable[maxn] = { 0 };

bool cmp(Node a, Node b) {
	return a.order < b.order;
}

int main() {
	int head, n, address;
	scanf("%d %d", &head, &n);
	for (int i = 0;i < maxn;i++) {
		node[i].order = maxn * 2;
	}
	for (int i = 0;i < n;i++) {
		scanf("%d", &address);
		node[address].address = address;
		scanf("%d %d", &node[address].key, &node[address].next);
	}
	int p = head, count = 0, sub = 0;
	while (p != -1) {
		count++;
		int a = abs(node[p].key);
		if (hashTable[a] == false) {
			hashTable[a] = true;
			node[p].order = count;
			sub++;
		}
		else {
			node[p].order = maxn + count;
		}
		p = node[p].next;
	}
	sort(node, node + maxn, cmp);
	for (int i = 0;i < sub;i++) {
		if (i != sub - 1) printf("%05d %d %05d\n", node[i].address, node[i].key, node[i + 1].address);
		else printf("%05d %d -1\n", node[i].address, node[i].key);
	}
	for (int i = sub;i < count;i++) {
		if (i != count - 1) printf("%05d %d %05d\n", node[i].address, node[i].key, node[i + 1].address);
		else printf("%05d %d -1\n", node[i].address, node[i].key);
	}
	return 0;
}
