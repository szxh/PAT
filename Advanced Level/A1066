#include <cstdio>
#include <iostream>
#include <algorithm>
using namespace std;

struct node {
	int v, height;
	node *left;
	node *right;
};

node* newnode(int v) {
	node* root = new node;
	root->v = v;
	root->height = 1;
	root->left = root->right = NULL;
	return root;
}

int getHeight(node* root) {
	if (root == NULL) return 0;
	else return root->height;
}

int getBalanceFactor(node* root) {
	return getHeight(root->left) - getHeight(root->right);
}

void updateHeight(node* root) {
	root->height = max(getHeight(root->left), getHeight(root->right)) + 1;
}

void L(node* &root) {
	node* temp = root->right;
	root->right = temp->left;
	temp->left = root;
	updateHeight(root);
	updateHeight(temp);
	root = temp;
}

void R(node* &root) {
	node* temp = root->left;
	root->left = temp->right;
	temp->right = root;
	updateHeight(root);
	updateHeight(temp);
	root = temp;
}

void insert(node* &root, int v) {
	if (root == NULL) {
		root = newnode(v);
		return;
	}
	if (v < root->v) {
		insert(root->left, v);
		updateHeight(root);
		if (getBalanceFactor(root) == 2) {
			if (getBalanceFactor(root->left) == 1) {
				R(root);
			}
			else if (getBalanceFactor(root->left) == -1) {
				L(root->left);
				R(root);
			}
		}
	}
	else {
		insert(root->right, v);
		updateHeight(root);
		if (getBalanceFactor(root) == -2) {
			if (getBalanceFactor(root->right) == -1) {
				L(root);
			}
			else if (getBalanceFactor(root->right) == 1) {
				R(root->right);
				L(root);
			}
		}
	}
}

node* create(int data[], int n) {
	node* root = NULL;
	for (int i = 0;i < n;i++) {
		insert(root, data[i]);
	}
	return root;
}

int main() {
	int n;
	scanf("%d", &n);
	int num[100];
	for (int i = 0;i < n;i++) {
		scanf("%d", &num[i]);
	}
	node* root = create(num, n);
	printf("%d", root->v);
	return 0;
}
