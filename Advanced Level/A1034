#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string>
#include <map>
#include <iostream>
using namespace std;
const int maxn = 2011;
int G[maxn][maxn] = { 0 };
int weight[maxn] = { 0 };
bool vis[maxn] = { false };
map<string, int> stn;
map<int, string> nts;
map<string, int> gang;
int numPerson = 0;


int getid(string s) {
	if (stn.find(s) != stn.end()) {
		return stn[s];
	}
	stn[s] = numPerson;
	nts[numPerson] = s;
	return numPerson++;
}
//当前访问成员， 小组总通话时间，小组成员数，小组内点权最大的成员
void dfs(int now, int& total, int& numM, int& head) {
	numM++;
	vis[now] = true;
	if (weight[now] > weight[head]) {
		head = now;
	}
	for (int i = 0;i < numPerson;i++) {
		if (G[now][i] > 0) {
			total += G[now][i];
			G[now][i] = G[i][now] = 0;
			if (vis[i] == false) {
				dfs(i, total, numM, head);
			}
		}
	}
}

int main() {
	int n, k, time;
	string s1, s2;
	cin >> n >> k;
	for (int i = 0;i < n;i++) {
		cin >> s1 >> s2 >> time;
		int a = getid(s1);
		int b = getid(s2);
		weight[a] += time;
		weight[b] += time;
		G[a][b] += time;
		G[b][a] += time;
	}
	for (int i = 0;i < numPerson;i++) {
		if (vis[i] == false) {
			int total = 0, numM = 0, head = i;
			dfs(i, total, numM, head);
			if (numM > 2 && total > k) {
				gang[nts[head]] = numM;
			}
		}
	}
	cout << gang.size() << endl;
	for (map<string, int>::iterator it = gang.begin();it != gang.end();it++) {
		cout << it->first << " " << it->second << endl;
	}
	return 0;
}
