#include <cstdio>
#include <algorithm>
#include <cstring>
using namespace std;

struct bign {
	int d[1000];
	int len;
	bign() {
		len = 0;
		memset(d, 0, sizeof(d));
	}
};


bign change(char str[]) {
	bign a;
	a.len = strlen(str);
	for (int i = 0;i < a.len;i++) {
		a.d[i] = str[a.len - i - 1] - '0';
	}
	return a;
}

bool judge(bign a) {
	if (a.len == 1) return true;
	for (int i = 0;i <= a.len / 2;i++) {
		if (a.d[i] != a.d[a.len - i - 1]) return false;
	}
	return true;
}

bign rever(bign a) {
	for (int i = 0;i < a.len / 2;i++) {
		int temp = a.d[i];
		a.d[i] = a.d[a.len - i - 1];
		a.d[a.len - i - 1] = temp;
	}
	return a;
}

bign add(bign a, bign b) {
	int carry = 0;
	bign c;
	for (int i = 0;i < a.len || i < b.len;i++) {
		int temp = a.d[i] + b.d[i] + carry;
		c.d[c.len++] = temp % 10;
		carry = temp / 10;
	}
	if (carry != 0) {
		c.d[c.len++] = carry;
	}
	return c;
}

int main() {
	char str[15];
	int k;
	scanf("%s %d", str, &k);
	bign a = change(str);
	bign b;
	int step;
	for (step = 0;step < k;step++) {
		if (judge(a) == true) break;
		else {
			b = rever(a);
			a = add(a, b);
		}
	}
	for (int i = 0;i < a.len;i++) {
		printf("%d", a.d[a.len - i - 1]);
		if (i == a.len - 1) printf("\n");
	}
	printf("%d\n", step);
	return 0;
}
