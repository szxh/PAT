#include <cstdio>
#include <queue>
#include <algorithm>
using namespace std;

bool inq[1290][130][62] = { false };
int pixel[1290][130][62];
int n, m, slice, t;

struct Node {
	int x, y, z;
}node;

int X[6] = { 0, 0, 0, 0, 1, -1 };
int Y[6] = { 0, 0, 1, -1, 0, 0 };
int Z[6] = { 1, -1, 0, 0, 0, 0 };

bool judge(int x, int y, int z) {
	if (x >= n || x < 0 || y >= m || y < 0 || z >= slice || z < 0) return false;
	if (pixel[x][y][z] == 0 || inq[x][y][z] == true) return false;
	return true;
}


int BFS(int x, int y, int z) {
	int count = 0;
	queue<Node> q;
	node.x = x, node.y = y, node.z = z;
	q.push(node);
	inq[x][y][z] = true;
	while (!q.empty()) {
		Node top = q.front();
		q.pop();
		count++;
		for (int i = 0;i < 6;i++) {
			int newx = top.x + X[i];
			int newy = top.y + Y[i];
			int newz = top.z + Z[i];
			if (judge(newx, newy, newz)) {
				node.x = newx, node.y = newy, node.z = newz;
				q.push(node);
				inq[newx][newy][newz] = true;
			}
		}
	}
	if (count >= t) return count;
	else return 0;
}

int main() {
	scanf("%d %d %d %d", &n, &m, &slice, &t);
	for (int z = 0; z < slice;z++) {
		for (int x = 0;x < n;x++) {
			for (int y = 0;y < m;y++) {
				scanf("%d", &pixel[x][y][z]);
			}
		}
	}
	int ans = 0;
	for (int z = 0; z < slice;z++) {
		for (int x = 0;x < n;x++) {
			for (int y = 0;y < m;y++) {
				if (pixel[x][y][z] == 1 && inq[x][y][z] == false) {
					ans += BFS(x, y, z);
				}
			}
		}
	}
	printf("%d", ans);
	return 0;
}
